// <auto-generated />
using MailboxApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EFCoreRelationships.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20231127064740_init-db")]
    partial class initdb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EFCoreRelationships.Data.Entities.many_to_many.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("EFCoreRelationships.Data.Entities.many_to_many.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("EFCoreRelationships.Data.Entities.one_to_many.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("EFCoreRelationships.Data.Entities.one_to_many.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EFCoreRelationships.Data.Entities.one_to_one.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("EFCoreRelationships.Data.Entities.one_to_one.Biography", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .IsUnique();

                    b.ToTable("Biographies");
                });

            modelBuilder.Entity("StudentTeacher", b =>
                {
                    b.Property<int>("StudentsId")
                        .HasColumnType("integer");

                    b.Property<int>("TeachersId")
                        .HasColumnType("integer");

                    b.HasKey("StudentsId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("TeacherStudent", (string)null);
                });

            modelBuilder.Entity("EFCoreRelationships.Data.Entities.one_to_many.Order", b =>
                {
                    b.HasOne("EFCoreRelationships.Data.Entities.one_to_many.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("EFCoreRelationships.Data.Entities.one_to_one.Biography", b =>
                {
                    b.HasOne("EFCoreRelationships.Data.Entities.one_to_one.Author", "Author")
                        .WithOne("Biography")
                        .HasForeignKey("EFCoreRelationships.Data.Entities.one_to_one.Biography", "AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            //modelBuilder.Entity("StudentTeacher", b =>
            //    {
            //        b.HasOne("EFCoreRelationships.Data.Entities.many_to_many.Student", null)
            //            .WithMany()
            //            .HasForeignKey("StudentsId")
            //            .OnDelete(DeleteBehavior.Cascade)
            //            .IsRequired();

            //        b.HasOne("EFCoreRelationships.Data.Entities.many_to_many.Teacher", null)
            //            .WithMany()
            //            .HasForeignKey("TeachersId")
            //            .OnDelete(DeleteBehavior.Cascade)
            //            .IsRequired();
            //    });

            // Make many-many entities independent to eachother.
            modelBuilder.Entity("StudentTeacher", b =>
            {
                b.HasOne("EFCoreRelationships.Data.Entities.many_to_many.Student", null)
                    .WithMany()
                    .HasForeignKey("StudentsId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.HasOne("EFCoreRelationships.Data.Entities.many_to_many.Teacher", null)
                    .WithMany()
                    .HasForeignKey("TeachersId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();
            });

            modelBuilder.Entity("EFCoreRelationships.Data.Entities.one_to_many.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EFCoreRelationships.Data.Entities.one_to_one.Author", b =>
                {
                    b.Navigation("Biography");
                });
#pragma warning restore 612, 618
        }
    }
}
